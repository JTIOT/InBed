//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace InBed.Service.OnBedService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.ban99.com/", ConfigurationName="OnBedService.WebServiceSoap")]
    public interface WebServiceSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.ban99.com/HelloWorld", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string HelloWorld();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.ban99.com/HelloWorld", ReplyAction="*")]
        System.Threading.Tasks.Task<string> HelloWorldAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.ban99.com/RequestTokenMethod", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string RequestTokenMethod(string appId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.ban99.com/RequestTokenMethod", ReplyAction="*")]
        System.Threading.Tasks.Task<string> RequestTokenMethodAsync(string appId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.ban99.com/VerifyTokenMethod", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string VerifyTokenMethod(string appId, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.ban99.com/VerifyTokenMethod", ReplyAction="*")]
        System.Threading.Tasks.Task<string> VerifyTokenMethodAsync(string appId, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.ban99.com/GetProductList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetProductList(string filter, string appId, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.ban99.com/GetProductList", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetProductListAsync(string filter, string appId, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.ban99.com/GetBCGArray", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetBCGArray(string devicename, string appId, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.ban99.com/GetBCGArray", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetBCGArrayAsync(string devicename, string appId, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.ban99.com/GetBreathArray", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetBreathArray(string devicename, string appId, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.ban99.com/GetBreathArray", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetBreathArrayAsync(string devicename, string appId, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.ban99.com/GetHBHistory", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetHBHistory(string devicename, string startTime, string endTime, string appId, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.ban99.com/GetHBHistory", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetHBHistoryAsync(string devicename, string startTime, string endTime, string appId, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.ban99.com/GetBRHistory", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetBRHistory(string devicename, string startTime, string endTime, string appId, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.ban99.com/GetBRHistory", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetBRHistoryAsync(string devicename, string startTime, string endTime, string appId, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.ban99.com/GetWHistory", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetWHistory(string devicename, string startTime, string endTime, string appId, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.ban99.com/GetWHistory", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetWHistoryAsync(string devicename, string startTime, string endTime, string appId, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.ban99.com/GetBedRecord", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetBedRecord(string devicename, string startTime, string endTime, string appId, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.ban99.com/GetBedRecord", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetBedRecordAsync(string devicename, string startTime, string endTime, string appId, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.ban99.com/GetSleepRecord", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetSleepRecord(string devicename, string startTime, string endTime, string appId, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.ban99.com/GetSleepRecord", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetSleepRecordAsync(string devicename, string startTime, string endTime, string appId, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.ban99.com/GetAlarm", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetAlarm(string devicename, string startTime, string endTime, string appId, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.ban99.com/GetAlarm", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetAlarmAsync(string devicename, string startTime, string endTime, string appId, string token);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface WebServiceSoapChannel : InBed.Service.OnBedService.WebServiceSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WebServiceSoapClient : System.ServiceModel.ClientBase<InBed.Service.OnBedService.WebServiceSoap>, InBed.Service.OnBedService.WebServiceSoap {
        
        public WebServiceSoapClient() {
        }
        
        public WebServiceSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WebServiceSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WebServiceSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WebServiceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string HelloWorld() {
            return base.Channel.HelloWorld();
        }
        
        public System.Threading.Tasks.Task<string> HelloWorldAsync() {
            return base.Channel.HelloWorldAsync();
        }
        
        public string RequestTokenMethod(string appId) {
            return base.Channel.RequestTokenMethod(appId);
        }
        
        public System.Threading.Tasks.Task<string> RequestTokenMethodAsync(string appId) {
            return base.Channel.RequestTokenMethodAsync(appId);
        }
        
        public string VerifyTokenMethod(string appId, string token) {
            return base.Channel.VerifyTokenMethod(appId, token);
        }
        
        public System.Threading.Tasks.Task<string> VerifyTokenMethodAsync(string appId, string token) {
            return base.Channel.VerifyTokenMethodAsync(appId, token);
        }
        
        public string GetProductList(string filter, string appId, string token) {
            return base.Channel.GetProductList(filter, appId, token);
        }
        
        public System.Threading.Tasks.Task<string> GetProductListAsync(string filter, string appId, string token) {
            return base.Channel.GetProductListAsync(filter, appId, token);
        }
        
        public string GetBCGArray(string devicename, string appId, string token) {
            return base.Channel.GetBCGArray(devicename, appId, token);
        }
        
        public System.Threading.Tasks.Task<string> GetBCGArrayAsync(string devicename, string appId, string token) {
            return base.Channel.GetBCGArrayAsync(devicename, appId, token);
        }
        
        public string GetBreathArray(string devicename, string appId, string token) {
            return base.Channel.GetBreathArray(devicename, appId, token);
        }
        
        public System.Threading.Tasks.Task<string> GetBreathArrayAsync(string devicename, string appId, string token) {
            return base.Channel.GetBreathArrayAsync(devicename, appId, token);
        }
        
        public string GetHBHistory(string devicename, string startTime, string endTime, string appId, string token) {
            return base.Channel.GetHBHistory(devicename, startTime, endTime, appId, token);
        }
        
        public System.Threading.Tasks.Task<string> GetHBHistoryAsync(string devicename, string startTime, string endTime, string appId, string token) {
            return base.Channel.GetHBHistoryAsync(devicename, startTime, endTime, appId, token);
        }
        
        public string GetBRHistory(string devicename, string startTime, string endTime, string appId, string token) {
            return base.Channel.GetBRHistory(devicename, startTime, endTime, appId, token);
        }
        
        public System.Threading.Tasks.Task<string> GetBRHistoryAsync(string devicename, string startTime, string endTime, string appId, string token) {
            return base.Channel.GetBRHistoryAsync(devicename, startTime, endTime, appId, token);
        }
        
        public string GetWHistory(string devicename, string startTime, string endTime, string appId, string token) {
            return base.Channel.GetWHistory(devicename, startTime, endTime, appId, token);
        }
        
        public System.Threading.Tasks.Task<string> GetWHistoryAsync(string devicename, string startTime, string endTime, string appId, string token) {
            return base.Channel.GetWHistoryAsync(devicename, startTime, endTime, appId, token);
        }
        
        public string GetBedRecord(string devicename, string startTime, string endTime, string appId, string token) {
            return base.Channel.GetBedRecord(devicename, startTime, endTime, appId, token);
        }
        
        public System.Threading.Tasks.Task<string> GetBedRecordAsync(string devicename, string startTime, string endTime, string appId, string token) {
            return base.Channel.GetBedRecordAsync(devicename, startTime, endTime, appId, token);
        }
        
        public string GetSleepRecord(string devicename, string startTime, string endTime, string appId, string token) {
            return base.Channel.GetSleepRecord(devicename, startTime, endTime, appId, token);
        }
        
        public System.Threading.Tasks.Task<string> GetSleepRecordAsync(string devicename, string startTime, string endTime, string appId, string token) {
            return base.Channel.GetSleepRecordAsync(devicename, startTime, endTime, appId, token);
        }
        
        public string GetAlarm(string devicename, string startTime, string endTime, string appId, string token) {
            return base.Channel.GetAlarm(devicename, startTime, endTime, appId, token);
        }
        
        public System.Threading.Tasks.Task<string> GetAlarmAsync(string devicename, string startTime, string endTime, string appId, string token) {
            return base.Channel.GetAlarmAsync(devicename, startTime, endTime, appId, token);
        }
    }
}
